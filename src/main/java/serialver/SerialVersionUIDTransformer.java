/*
 * ProActive Parallel Suite(TM):
 * The Open Source library for parallel and distributed
 * Workflows & Scheduling, Orchestration, Cloud Automation
 * and Big Data Analysis on Enterprise Grids & Clouds.
 *
 * Copyright (c) 2007 - 2017 ActiveEon
 * Contact: contact@activeeon.com
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation: version 3 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 */
package serialver;

import java.io.Serializable;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.NotFoundException;
import javassist.build.JavassistBuildException;

import com.darylteo.gradle.javassist.transformers.ClassTransformer;


public class SerialVersionUIDTransformer extends ClassTransformer {

    private static final String SERIALVERSIONUID_FIELD_NAME = "serialVersionUID";

    private long serialVersionUIDValue;

    private boolean overwrite;

    private boolean forceUIDOnException;

    public SerialVersionUIDTransformer(long serialVersionUIDValue) {
        this(serialVersionUIDValue, true, false);
    }

    public SerialVersionUIDTransformer(long serialVersionUIDValue, boolean overwrite, boolean forceUIDOnException) {
        this.serialVersionUIDValue = serialVersionUIDValue;
        this.overwrite = overwrite;
        this.forceUIDOnException = forceUIDOnException;
    }

    public void applyTransformations(CtClass clazz) throws JavassistBuildException {
        try {

            if (hasSerialVersionUIDField(clazz)) {
                if (overwrite || (forceUIDOnException && isException(clazz))) {
                    // replace existing serialVersionUID
                    clazz.removeField(clazz.getField(SERIALVERSIONUID_FIELD_NAME));
                }
            }

            if (!hasSerialVersionUIDField(clazz)) {
                CtField field = new CtField(CtClass.longType, SERIALVERSIONUID_FIELD_NAME, clazz);
                field.setModifiers(javassist.Modifier.STATIC | javassist.Modifier.PRIVATE | javassist.Modifier.FINAL);
                if (forceUIDOnException && isException(clazz)) {
                    clazz.addField(field, javassist.CtField.Initializer.constant(1L));
                } else {
                    clazz.addField(field, javassist.CtField.Initializer.constant(serialVersionUIDValue));
                }
            }
        } catch (Exception e) {
            throw new JavassistBuildException(e);
        }
    }

    public boolean shouldTransform(CtClass clazz) throws JavassistBuildException {
        try {
            return isClass(clazz) && isSerializable(clazz);
        } catch (NotFoundException e) {
            throw new JavassistBuildException(e);
        }
    }

    private boolean isException(CtClass clazz) throws NotFoundException {
        try {
            return clazz.subtypeOf(ClassPool.getDefault().get(Exception.class.getName()));
        } catch (Exception e) {
            // subtypeOf can throw exceptions when the class has not been properly loaded (for example stubs generated by javassist).
            return false;
        }
    }

    private boolean isClass(CtClass clazz) {
        return !clazz.isInterface() && !clazz.isEnum();
    }

    private boolean isSerializable(CtClass clazz) throws NotFoundException {
        return clazz.subtypeOf(ClassPool.getDefault().get(Serializable.class.getName()));
    }

    private boolean hasSerialVersionUIDField(CtClass clazz) {
        try {
            CtField serialVersionUIDField = clazz.getField(SERIALVERSIONUID_FIELD_NAME);
            return serialVersionUIDField.getDeclaringClass().equals(clazz);
        } catch (NotFoundException classHasNoSerialVersionUIDField) {
            return false;
        }
    }
}
